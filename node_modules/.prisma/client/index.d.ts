
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  createdAt: Date
  updatedAt: Date
  username: string
  user_id: string | null
  followers: number
}

/**
 * Model FollowsCount
 * 
 */
export type FollowsCount = {
  id: string
  name: string | null
  value: number
  createdAt: Date
  userId: string
}

/**
 * Model Impressions
 * 
 */
export type Impressions = {
  id: string
  name: string | null
  value: number
  createdAt: Date
  userId: string
}

/**
 * Model WebsiteClicks
 * 
 */
export type WebsiteClicks = {
  id: string
  name: string | null
  value: number
  createdAt: Date
  userId: string
}

/**
 * Model Reach
 * 
 */
export type Reach = {
  id: string
  name: string | null
  value: number
  createdAt: Date
  userId: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.followsCount`: Exposes CRUD operations for the **FollowsCount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FollowsCounts
    * const followsCounts = await prisma.followsCount.findMany()
    * ```
    */
  get followsCount(): Prisma.FollowsCountDelegate<GlobalReject>;

  /**
   * `prisma.impressions`: Exposes CRUD operations for the **Impressions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Impressions
    * const impressions = await prisma.impressions.findMany()
    * ```
    */
  get impressions(): Prisma.ImpressionsDelegate<GlobalReject>;

  /**
   * `prisma.websiteClicks`: Exposes CRUD operations for the **WebsiteClicks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebsiteClicks
    * const websiteClicks = await prisma.websiteClicks.findMany()
    * ```
    */
  get websiteClicks(): Prisma.WebsiteClicksDelegate<GlobalReject>;

  /**
   * `prisma.reach`: Exposes CRUD operations for the **Reach** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reaches
    * const reaches = await prisma.reach.findMany()
    * ```
    */
  get reach(): Prisma.ReachDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    FollowsCount: 'FollowsCount',
    Impressions: 'Impressions',
    WebsiteClicks: 'WebsiteClicks',
    Reach: 'Reach'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    followsCount: number
    impressions: number
    websiteClicks: number
    reach: number
  }

  export type UserCountOutputTypeSelect = {
    followsCount?: boolean
    impressions?: boolean
    websiteClicks?: boolean
    reach?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    followers: number | null
  }

  export type UserSumAggregateOutputType = {
    followers: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    username: string | null
    user_id: string | null
    followers: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    username: string | null
    user_id: string | null
    followers: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    username: number
    user_id: number
    followers: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    followers?: true
  }

  export type UserSumAggregateInputType = {
    followers?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    username?: true
    user_id?: true
    followers?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    username?: true
    user_id?: true
    followers?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    username?: true
    user_id?: true
    followers?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    username: string
    user_id: string | null
    followers: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    username?: boolean
    user_id?: boolean
    followers?: boolean
    followsCount?: boolean | User$followsCountArgs
    impressions?: boolean | User$impressionsArgs
    websiteClicks?: boolean | User$websiteClicksArgs
    reach?: boolean | User$reachArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    followsCount?: boolean | User$followsCountArgs
    impressions?: boolean | User$impressionsArgs
    websiteClicks?: boolean | User$websiteClicksArgs
    reach?: boolean | User$reachArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'followsCount' ? Array < FollowsCountGetPayload<S['include'][P]>>  :
        P extends 'impressions' ? Array < ImpressionsGetPayload<S['include'][P]>>  :
        P extends 'websiteClicks' ? Array < WebsiteClicksGetPayload<S['include'][P]>>  :
        P extends 'reach' ? Array < ReachGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'followsCount' ? Array < FollowsCountGetPayload<S['select'][P]>>  :
        P extends 'impressions' ? Array < ImpressionsGetPayload<S['select'][P]>>  :
        P extends 'websiteClicks' ? Array < WebsiteClicksGetPayload<S['select'][P]>>  :
        P extends 'reach' ? Array < ReachGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    followsCount<T extends User$followsCountArgs= {}>(args?: Subset<T, User$followsCountArgs>): PrismaPromise<Array<FollowsCountGetPayload<T>>| Null>;

    impressions<T extends User$impressionsArgs= {}>(args?: Subset<T, User$impressionsArgs>): PrismaPromise<Array<ImpressionsGetPayload<T>>| Null>;

    websiteClicks<T extends User$websiteClicksArgs= {}>(args?: Subset<T, User$websiteClicksArgs>): PrismaPromise<Array<WebsiteClicksGetPayload<T>>| Null>;

    reach<T extends User$reachArgs= {}>(args?: Subset<T, User$reachArgs>): PrismaPromise<Array<ReachGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.followsCount
   */
  export type User$followsCountArgs = {
    /**
     * Select specific fields to fetch from the FollowsCount
     */
    select?: FollowsCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsCountInclude | null
    where?: FollowsCountWhereInput
    orderBy?: Enumerable<FollowsCountOrderByWithRelationInput>
    cursor?: FollowsCountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FollowsCountScalarFieldEnum>
  }


  /**
   * User.impressions
   */
  export type User$impressionsArgs = {
    /**
     * Select specific fields to fetch from the Impressions
     */
    select?: ImpressionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImpressionsInclude | null
    where?: ImpressionsWhereInput
    orderBy?: Enumerable<ImpressionsOrderByWithRelationInput>
    cursor?: ImpressionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ImpressionsScalarFieldEnum>
  }


  /**
   * User.websiteClicks
   */
  export type User$websiteClicksArgs = {
    /**
     * Select specific fields to fetch from the WebsiteClicks
     */
    select?: WebsiteClicksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsiteClicksInclude | null
    where?: WebsiteClicksWhereInput
    orderBy?: Enumerable<WebsiteClicksOrderByWithRelationInput>
    cursor?: WebsiteClicksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WebsiteClicksScalarFieldEnum>
  }


  /**
   * User.reach
   */
  export type User$reachArgs = {
    /**
     * Select specific fields to fetch from the Reach
     */
    select?: ReachSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReachInclude | null
    where?: ReachWhereInput
    orderBy?: Enumerable<ReachOrderByWithRelationInput>
    cursor?: ReachWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReachScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model FollowsCount
   */


  export type AggregateFollowsCount = {
    _count: FollowsCountCountAggregateOutputType | null
    _avg: FollowsCountAvgAggregateOutputType | null
    _sum: FollowsCountSumAggregateOutputType | null
    _min: FollowsCountMinAggregateOutputType | null
    _max: FollowsCountMaxAggregateOutputType | null
  }

  export type FollowsCountAvgAggregateOutputType = {
    value: number | null
  }

  export type FollowsCountSumAggregateOutputType = {
    value: number | null
  }

  export type FollowsCountMinAggregateOutputType = {
    id: string | null
    name: string | null
    value: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type FollowsCountMaxAggregateOutputType = {
    id: string | null
    name: string | null
    value: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type FollowsCountCountAggregateOutputType = {
    id: number
    name: number
    value: number
    createdAt: number
    userId: number
    _all: number
  }


  export type FollowsCountAvgAggregateInputType = {
    value?: true
  }

  export type FollowsCountSumAggregateInputType = {
    value?: true
  }

  export type FollowsCountMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
    createdAt?: true
    userId?: true
  }

  export type FollowsCountMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
    createdAt?: true
    userId?: true
  }

  export type FollowsCountCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type FollowsCountAggregateArgs = {
    /**
     * Filter which FollowsCount to aggregate.
     */
    where?: FollowsCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FollowsCounts to fetch.
     */
    orderBy?: Enumerable<FollowsCountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowsCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FollowsCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FollowsCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FollowsCounts
    **/
    _count?: true | FollowsCountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FollowsCountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FollowsCountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowsCountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowsCountMaxAggregateInputType
  }

  export type GetFollowsCountAggregateType<T extends FollowsCountAggregateArgs> = {
        [P in keyof T & keyof AggregateFollowsCount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollowsCount[P]>
      : GetScalarType<T[P], AggregateFollowsCount[P]>
  }




  export type FollowsCountGroupByArgs = {
    where?: FollowsCountWhereInput
    orderBy?: Enumerable<FollowsCountOrderByWithAggregationInput>
    by: FollowsCountScalarFieldEnum[]
    having?: FollowsCountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowsCountCountAggregateInputType | true
    _avg?: FollowsCountAvgAggregateInputType
    _sum?: FollowsCountSumAggregateInputType
    _min?: FollowsCountMinAggregateInputType
    _max?: FollowsCountMaxAggregateInputType
  }


  export type FollowsCountGroupByOutputType = {
    id: string
    name: string | null
    value: number
    createdAt: Date
    userId: string
    _count: FollowsCountCountAggregateOutputType | null
    _avg: FollowsCountAvgAggregateOutputType | null
    _sum: FollowsCountSumAggregateOutputType | null
    _min: FollowsCountMinAggregateOutputType | null
    _max: FollowsCountMaxAggregateOutputType | null
  }

  type GetFollowsCountGroupByPayload<T extends FollowsCountGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FollowsCountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowsCountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowsCountGroupByOutputType[P]>
            : GetScalarType<T[P], FollowsCountGroupByOutputType[P]>
        }
      >
    >


  export type FollowsCountSelect = {
    id?: boolean
    name?: boolean
    value?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs
    userId?: boolean
  }


  export type FollowsCountInclude = {
    user?: boolean | UserArgs
  }

  export type FollowsCountGetPayload<S extends boolean | null | undefined | FollowsCountArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FollowsCount :
    S extends undefined ? never :
    S extends { include: any } & (FollowsCountArgs | FollowsCountFindManyArgs)
    ? FollowsCount  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FollowsCountArgs | FollowsCountFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof FollowsCount ? FollowsCount[P] : never
  } 
      : FollowsCount


  type FollowsCountCountArgs = 
    Omit<FollowsCountFindManyArgs, 'select' | 'include'> & {
      select?: FollowsCountCountAggregateInputType | true
    }

  export interface FollowsCountDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FollowsCount that matches the filter.
     * @param {FollowsCountFindUniqueArgs} args - Arguments to find a FollowsCount
     * @example
     * // Get one FollowsCount
     * const followsCount = await prisma.followsCount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FollowsCountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FollowsCountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FollowsCount'> extends True ? Prisma__FollowsCountClient<FollowsCountGetPayload<T>> : Prisma__FollowsCountClient<FollowsCountGetPayload<T> | null, null>

    /**
     * Find one FollowsCount that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FollowsCountFindUniqueOrThrowArgs} args - Arguments to find a FollowsCount
     * @example
     * // Get one FollowsCount
     * const followsCount = await prisma.followsCount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FollowsCountFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FollowsCountFindUniqueOrThrowArgs>
    ): Prisma__FollowsCountClient<FollowsCountGetPayload<T>>

    /**
     * Find the first FollowsCount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsCountFindFirstArgs} args - Arguments to find a FollowsCount
     * @example
     * // Get one FollowsCount
     * const followsCount = await prisma.followsCount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FollowsCountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FollowsCountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FollowsCount'> extends True ? Prisma__FollowsCountClient<FollowsCountGetPayload<T>> : Prisma__FollowsCountClient<FollowsCountGetPayload<T> | null, null>

    /**
     * Find the first FollowsCount that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsCountFindFirstOrThrowArgs} args - Arguments to find a FollowsCount
     * @example
     * // Get one FollowsCount
     * const followsCount = await prisma.followsCount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FollowsCountFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FollowsCountFindFirstOrThrowArgs>
    ): Prisma__FollowsCountClient<FollowsCountGetPayload<T>>

    /**
     * Find zero or more FollowsCounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsCountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FollowsCounts
     * const followsCounts = await prisma.followsCount.findMany()
     * 
     * // Get first 10 FollowsCounts
     * const followsCounts = await prisma.followsCount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followsCountWithIdOnly = await prisma.followsCount.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FollowsCountFindManyArgs>(
      args?: SelectSubset<T, FollowsCountFindManyArgs>
    ): PrismaPromise<Array<FollowsCountGetPayload<T>>>

    /**
     * Create a FollowsCount.
     * @param {FollowsCountCreateArgs} args - Arguments to create a FollowsCount.
     * @example
     * // Create one FollowsCount
     * const FollowsCount = await prisma.followsCount.create({
     *   data: {
     *     // ... data to create a FollowsCount
     *   }
     * })
     * 
    **/
    create<T extends FollowsCountCreateArgs>(
      args: SelectSubset<T, FollowsCountCreateArgs>
    ): Prisma__FollowsCountClient<FollowsCountGetPayload<T>>

    /**
     * Create many FollowsCounts.
     *     @param {FollowsCountCreateManyArgs} args - Arguments to create many FollowsCounts.
     *     @example
     *     // Create many FollowsCounts
     *     const followsCount = await prisma.followsCount.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FollowsCountCreateManyArgs>(
      args?: SelectSubset<T, FollowsCountCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a FollowsCount.
     * @param {FollowsCountDeleteArgs} args - Arguments to delete one FollowsCount.
     * @example
     * // Delete one FollowsCount
     * const FollowsCount = await prisma.followsCount.delete({
     *   where: {
     *     // ... filter to delete one FollowsCount
     *   }
     * })
     * 
    **/
    delete<T extends FollowsCountDeleteArgs>(
      args: SelectSubset<T, FollowsCountDeleteArgs>
    ): Prisma__FollowsCountClient<FollowsCountGetPayload<T>>

    /**
     * Update one FollowsCount.
     * @param {FollowsCountUpdateArgs} args - Arguments to update one FollowsCount.
     * @example
     * // Update one FollowsCount
     * const followsCount = await prisma.followsCount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FollowsCountUpdateArgs>(
      args: SelectSubset<T, FollowsCountUpdateArgs>
    ): Prisma__FollowsCountClient<FollowsCountGetPayload<T>>

    /**
     * Delete zero or more FollowsCounts.
     * @param {FollowsCountDeleteManyArgs} args - Arguments to filter FollowsCounts to delete.
     * @example
     * // Delete a few FollowsCounts
     * const { count } = await prisma.followsCount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FollowsCountDeleteManyArgs>(
      args?: SelectSubset<T, FollowsCountDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FollowsCounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsCountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FollowsCounts
     * const followsCount = await prisma.followsCount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FollowsCountUpdateManyArgs>(
      args: SelectSubset<T, FollowsCountUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FollowsCount.
     * @param {FollowsCountUpsertArgs} args - Arguments to update or create a FollowsCount.
     * @example
     * // Update or create a FollowsCount
     * const followsCount = await prisma.followsCount.upsert({
     *   create: {
     *     // ... data to create a FollowsCount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FollowsCount we want to update
     *   }
     * })
    **/
    upsert<T extends FollowsCountUpsertArgs>(
      args: SelectSubset<T, FollowsCountUpsertArgs>
    ): Prisma__FollowsCountClient<FollowsCountGetPayload<T>>

    /**
     * Count the number of FollowsCounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsCountCountArgs} args - Arguments to filter FollowsCounts to count.
     * @example
     * // Count the number of FollowsCounts
     * const count = await prisma.followsCount.count({
     *   where: {
     *     // ... the filter for the FollowsCounts we want to count
     *   }
     * })
    **/
    count<T extends FollowsCountCountArgs>(
      args?: Subset<T, FollowsCountCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowsCountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FollowsCount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsCountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowsCountAggregateArgs>(args: Subset<T, FollowsCountAggregateArgs>): PrismaPromise<GetFollowsCountAggregateType<T>>

    /**
     * Group by FollowsCount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsCountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowsCountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowsCountGroupByArgs['orderBy'] }
        : { orderBy?: FollowsCountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowsCountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowsCountGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FollowsCount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FollowsCountClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FollowsCount base type for findUnique actions
   */
  export type FollowsCountFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FollowsCount
     */
    select?: FollowsCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsCountInclude | null
    /**
     * Filter, which FollowsCount to fetch.
     */
    where: FollowsCountWhereUniqueInput
  }

  /**
   * FollowsCount findUnique
   */
  export interface FollowsCountFindUniqueArgs extends FollowsCountFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FollowsCount findUniqueOrThrow
   */
  export type FollowsCountFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FollowsCount
     */
    select?: FollowsCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsCountInclude | null
    /**
     * Filter, which FollowsCount to fetch.
     */
    where: FollowsCountWhereUniqueInput
  }


  /**
   * FollowsCount base type for findFirst actions
   */
  export type FollowsCountFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FollowsCount
     */
    select?: FollowsCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsCountInclude | null
    /**
     * Filter, which FollowsCount to fetch.
     */
    where?: FollowsCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FollowsCounts to fetch.
     */
    orderBy?: Enumerable<FollowsCountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FollowsCounts.
     */
    cursor?: FollowsCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FollowsCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FollowsCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FollowsCounts.
     */
    distinct?: Enumerable<FollowsCountScalarFieldEnum>
  }

  /**
   * FollowsCount findFirst
   */
  export interface FollowsCountFindFirstArgs extends FollowsCountFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FollowsCount findFirstOrThrow
   */
  export type FollowsCountFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FollowsCount
     */
    select?: FollowsCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsCountInclude | null
    /**
     * Filter, which FollowsCount to fetch.
     */
    where?: FollowsCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FollowsCounts to fetch.
     */
    orderBy?: Enumerable<FollowsCountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FollowsCounts.
     */
    cursor?: FollowsCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FollowsCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FollowsCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FollowsCounts.
     */
    distinct?: Enumerable<FollowsCountScalarFieldEnum>
  }


  /**
   * FollowsCount findMany
   */
  export type FollowsCountFindManyArgs = {
    /**
     * Select specific fields to fetch from the FollowsCount
     */
    select?: FollowsCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsCountInclude | null
    /**
     * Filter, which FollowsCounts to fetch.
     */
    where?: FollowsCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FollowsCounts to fetch.
     */
    orderBy?: Enumerable<FollowsCountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FollowsCounts.
     */
    cursor?: FollowsCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FollowsCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FollowsCounts.
     */
    skip?: number
    distinct?: Enumerable<FollowsCountScalarFieldEnum>
  }


  /**
   * FollowsCount create
   */
  export type FollowsCountCreateArgs = {
    /**
     * Select specific fields to fetch from the FollowsCount
     */
    select?: FollowsCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsCountInclude | null
    /**
     * The data needed to create a FollowsCount.
     */
    data: XOR<FollowsCountCreateInput, FollowsCountUncheckedCreateInput>
  }


  /**
   * FollowsCount createMany
   */
  export type FollowsCountCreateManyArgs = {
    /**
     * The data used to create many FollowsCounts.
     */
    data: Enumerable<FollowsCountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FollowsCount update
   */
  export type FollowsCountUpdateArgs = {
    /**
     * Select specific fields to fetch from the FollowsCount
     */
    select?: FollowsCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsCountInclude | null
    /**
     * The data needed to update a FollowsCount.
     */
    data: XOR<FollowsCountUpdateInput, FollowsCountUncheckedUpdateInput>
    /**
     * Choose, which FollowsCount to update.
     */
    where: FollowsCountWhereUniqueInput
  }


  /**
   * FollowsCount updateMany
   */
  export type FollowsCountUpdateManyArgs = {
    /**
     * The data used to update FollowsCounts.
     */
    data: XOR<FollowsCountUpdateManyMutationInput, FollowsCountUncheckedUpdateManyInput>
    /**
     * Filter which FollowsCounts to update
     */
    where?: FollowsCountWhereInput
  }


  /**
   * FollowsCount upsert
   */
  export type FollowsCountUpsertArgs = {
    /**
     * Select specific fields to fetch from the FollowsCount
     */
    select?: FollowsCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsCountInclude | null
    /**
     * The filter to search for the FollowsCount to update in case it exists.
     */
    where: FollowsCountWhereUniqueInput
    /**
     * In case the FollowsCount found by the `where` argument doesn't exist, create a new FollowsCount with this data.
     */
    create: XOR<FollowsCountCreateInput, FollowsCountUncheckedCreateInput>
    /**
     * In case the FollowsCount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowsCountUpdateInput, FollowsCountUncheckedUpdateInput>
  }


  /**
   * FollowsCount delete
   */
  export type FollowsCountDeleteArgs = {
    /**
     * Select specific fields to fetch from the FollowsCount
     */
    select?: FollowsCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsCountInclude | null
    /**
     * Filter which FollowsCount to delete.
     */
    where: FollowsCountWhereUniqueInput
  }


  /**
   * FollowsCount deleteMany
   */
  export type FollowsCountDeleteManyArgs = {
    /**
     * Filter which FollowsCounts to delete
     */
    where?: FollowsCountWhereInput
  }


  /**
   * FollowsCount without action
   */
  export type FollowsCountArgs = {
    /**
     * Select specific fields to fetch from the FollowsCount
     */
    select?: FollowsCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsCountInclude | null
  }



  /**
   * Model Impressions
   */


  export type AggregateImpressions = {
    _count: ImpressionsCountAggregateOutputType | null
    _avg: ImpressionsAvgAggregateOutputType | null
    _sum: ImpressionsSumAggregateOutputType | null
    _min: ImpressionsMinAggregateOutputType | null
    _max: ImpressionsMaxAggregateOutputType | null
  }

  export type ImpressionsAvgAggregateOutputType = {
    value: number | null
  }

  export type ImpressionsSumAggregateOutputType = {
    value: number | null
  }

  export type ImpressionsMinAggregateOutputType = {
    id: string | null
    name: string | null
    value: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type ImpressionsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    value: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type ImpressionsCountAggregateOutputType = {
    id: number
    name: number
    value: number
    createdAt: number
    userId: number
    _all: number
  }


  export type ImpressionsAvgAggregateInputType = {
    value?: true
  }

  export type ImpressionsSumAggregateInputType = {
    value?: true
  }

  export type ImpressionsMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
    createdAt?: true
    userId?: true
  }

  export type ImpressionsMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
    createdAt?: true
    userId?: true
  }

  export type ImpressionsCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type ImpressionsAggregateArgs = {
    /**
     * Filter which Impressions to aggregate.
     */
    where?: ImpressionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Impressions to fetch.
     */
    orderBy?: Enumerable<ImpressionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImpressionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Impressions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Impressions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Impressions
    **/
    _count?: true | ImpressionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImpressionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImpressionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImpressionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImpressionsMaxAggregateInputType
  }

  export type GetImpressionsAggregateType<T extends ImpressionsAggregateArgs> = {
        [P in keyof T & keyof AggregateImpressions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImpressions[P]>
      : GetScalarType<T[P], AggregateImpressions[P]>
  }




  export type ImpressionsGroupByArgs = {
    where?: ImpressionsWhereInput
    orderBy?: Enumerable<ImpressionsOrderByWithAggregationInput>
    by: ImpressionsScalarFieldEnum[]
    having?: ImpressionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImpressionsCountAggregateInputType | true
    _avg?: ImpressionsAvgAggregateInputType
    _sum?: ImpressionsSumAggregateInputType
    _min?: ImpressionsMinAggregateInputType
    _max?: ImpressionsMaxAggregateInputType
  }


  export type ImpressionsGroupByOutputType = {
    id: string
    name: string | null
    value: number
    createdAt: Date
    userId: string
    _count: ImpressionsCountAggregateOutputType | null
    _avg: ImpressionsAvgAggregateOutputType | null
    _sum: ImpressionsSumAggregateOutputType | null
    _min: ImpressionsMinAggregateOutputType | null
    _max: ImpressionsMaxAggregateOutputType | null
  }

  type GetImpressionsGroupByPayload<T extends ImpressionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ImpressionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImpressionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImpressionsGroupByOutputType[P]>
            : GetScalarType<T[P], ImpressionsGroupByOutputType[P]>
        }
      >
    >


  export type ImpressionsSelect = {
    id?: boolean
    name?: boolean
    value?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs
    userId?: boolean
  }


  export type ImpressionsInclude = {
    user?: boolean | UserArgs
  }

  export type ImpressionsGetPayload<S extends boolean | null | undefined | ImpressionsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Impressions :
    S extends undefined ? never :
    S extends { include: any } & (ImpressionsArgs | ImpressionsFindManyArgs)
    ? Impressions  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ImpressionsArgs | ImpressionsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Impressions ? Impressions[P] : never
  } 
      : Impressions


  type ImpressionsCountArgs = 
    Omit<ImpressionsFindManyArgs, 'select' | 'include'> & {
      select?: ImpressionsCountAggregateInputType | true
    }

  export interface ImpressionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Impressions that matches the filter.
     * @param {ImpressionsFindUniqueArgs} args - Arguments to find a Impressions
     * @example
     * // Get one Impressions
     * const impressions = await prisma.impressions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImpressionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ImpressionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Impressions'> extends True ? Prisma__ImpressionsClient<ImpressionsGetPayload<T>> : Prisma__ImpressionsClient<ImpressionsGetPayload<T> | null, null>

    /**
     * Find one Impressions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ImpressionsFindUniqueOrThrowArgs} args - Arguments to find a Impressions
     * @example
     * // Get one Impressions
     * const impressions = await prisma.impressions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ImpressionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ImpressionsFindUniqueOrThrowArgs>
    ): Prisma__ImpressionsClient<ImpressionsGetPayload<T>>

    /**
     * Find the first Impressions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpressionsFindFirstArgs} args - Arguments to find a Impressions
     * @example
     * // Get one Impressions
     * const impressions = await prisma.impressions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImpressionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ImpressionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Impressions'> extends True ? Prisma__ImpressionsClient<ImpressionsGetPayload<T>> : Prisma__ImpressionsClient<ImpressionsGetPayload<T> | null, null>

    /**
     * Find the first Impressions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpressionsFindFirstOrThrowArgs} args - Arguments to find a Impressions
     * @example
     * // Get one Impressions
     * const impressions = await prisma.impressions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ImpressionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ImpressionsFindFirstOrThrowArgs>
    ): Prisma__ImpressionsClient<ImpressionsGetPayload<T>>

    /**
     * Find zero or more Impressions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpressionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Impressions
     * const impressions = await prisma.impressions.findMany()
     * 
     * // Get first 10 Impressions
     * const impressions = await prisma.impressions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const impressionsWithIdOnly = await prisma.impressions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImpressionsFindManyArgs>(
      args?: SelectSubset<T, ImpressionsFindManyArgs>
    ): PrismaPromise<Array<ImpressionsGetPayload<T>>>

    /**
     * Create a Impressions.
     * @param {ImpressionsCreateArgs} args - Arguments to create a Impressions.
     * @example
     * // Create one Impressions
     * const Impressions = await prisma.impressions.create({
     *   data: {
     *     // ... data to create a Impressions
     *   }
     * })
     * 
    **/
    create<T extends ImpressionsCreateArgs>(
      args: SelectSubset<T, ImpressionsCreateArgs>
    ): Prisma__ImpressionsClient<ImpressionsGetPayload<T>>

    /**
     * Create many Impressions.
     *     @param {ImpressionsCreateManyArgs} args - Arguments to create many Impressions.
     *     @example
     *     // Create many Impressions
     *     const impressions = await prisma.impressions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ImpressionsCreateManyArgs>(
      args?: SelectSubset<T, ImpressionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Impressions.
     * @param {ImpressionsDeleteArgs} args - Arguments to delete one Impressions.
     * @example
     * // Delete one Impressions
     * const Impressions = await prisma.impressions.delete({
     *   where: {
     *     // ... filter to delete one Impressions
     *   }
     * })
     * 
    **/
    delete<T extends ImpressionsDeleteArgs>(
      args: SelectSubset<T, ImpressionsDeleteArgs>
    ): Prisma__ImpressionsClient<ImpressionsGetPayload<T>>

    /**
     * Update one Impressions.
     * @param {ImpressionsUpdateArgs} args - Arguments to update one Impressions.
     * @example
     * // Update one Impressions
     * const impressions = await prisma.impressions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImpressionsUpdateArgs>(
      args: SelectSubset<T, ImpressionsUpdateArgs>
    ): Prisma__ImpressionsClient<ImpressionsGetPayload<T>>

    /**
     * Delete zero or more Impressions.
     * @param {ImpressionsDeleteManyArgs} args - Arguments to filter Impressions to delete.
     * @example
     * // Delete a few Impressions
     * const { count } = await prisma.impressions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImpressionsDeleteManyArgs>(
      args?: SelectSubset<T, ImpressionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Impressions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpressionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Impressions
     * const impressions = await prisma.impressions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImpressionsUpdateManyArgs>(
      args: SelectSubset<T, ImpressionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Impressions.
     * @param {ImpressionsUpsertArgs} args - Arguments to update or create a Impressions.
     * @example
     * // Update or create a Impressions
     * const impressions = await prisma.impressions.upsert({
     *   create: {
     *     // ... data to create a Impressions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Impressions we want to update
     *   }
     * })
    **/
    upsert<T extends ImpressionsUpsertArgs>(
      args: SelectSubset<T, ImpressionsUpsertArgs>
    ): Prisma__ImpressionsClient<ImpressionsGetPayload<T>>

    /**
     * Count the number of Impressions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpressionsCountArgs} args - Arguments to filter Impressions to count.
     * @example
     * // Count the number of Impressions
     * const count = await prisma.impressions.count({
     *   where: {
     *     // ... the filter for the Impressions we want to count
     *   }
     * })
    **/
    count<T extends ImpressionsCountArgs>(
      args?: Subset<T, ImpressionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImpressionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Impressions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpressionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImpressionsAggregateArgs>(args: Subset<T, ImpressionsAggregateArgs>): PrismaPromise<GetImpressionsAggregateType<T>>

    /**
     * Group by Impressions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpressionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImpressionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImpressionsGroupByArgs['orderBy'] }
        : { orderBy?: ImpressionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImpressionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImpressionsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Impressions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ImpressionsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Impressions base type for findUnique actions
   */
  export type ImpressionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Impressions
     */
    select?: ImpressionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImpressionsInclude | null
    /**
     * Filter, which Impressions to fetch.
     */
    where: ImpressionsWhereUniqueInput
  }

  /**
   * Impressions findUnique
   */
  export interface ImpressionsFindUniqueArgs extends ImpressionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Impressions findUniqueOrThrow
   */
  export type ImpressionsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Impressions
     */
    select?: ImpressionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImpressionsInclude | null
    /**
     * Filter, which Impressions to fetch.
     */
    where: ImpressionsWhereUniqueInput
  }


  /**
   * Impressions base type for findFirst actions
   */
  export type ImpressionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Impressions
     */
    select?: ImpressionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImpressionsInclude | null
    /**
     * Filter, which Impressions to fetch.
     */
    where?: ImpressionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Impressions to fetch.
     */
    orderBy?: Enumerable<ImpressionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Impressions.
     */
    cursor?: ImpressionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Impressions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Impressions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Impressions.
     */
    distinct?: Enumerable<ImpressionsScalarFieldEnum>
  }

  /**
   * Impressions findFirst
   */
  export interface ImpressionsFindFirstArgs extends ImpressionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Impressions findFirstOrThrow
   */
  export type ImpressionsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Impressions
     */
    select?: ImpressionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImpressionsInclude | null
    /**
     * Filter, which Impressions to fetch.
     */
    where?: ImpressionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Impressions to fetch.
     */
    orderBy?: Enumerable<ImpressionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Impressions.
     */
    cursor?: ImpressionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Impressions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Impressions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Impressions.
     */
    distinct?: Enumerable<ImpressionsScalarFieldEnum>
  }


  /**
   * Impressions findMany
   */
  export type ImpressionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Impressions
     */
    select?: ImpressionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImpressionsInclude | null
    /**
     * Filter, which Impressions to fetch.
     */
    where?: ImpressionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Impressions to fetch.
     */
    orderBy?: Enumerable<ImpressionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Impressions.
     */
    cursor?: ImpressionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Impressions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Impressions.
     */
    skip?: number
    distinct?: Enumerable<ImpressionsScalarFieldEnum>
  }


  /**
   * Impressions create
   */
  export type ImpressionsCreateArgs = {
    /**
     * Select specific fields to fetch from the Impressions
     */
    select?: ImpressionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImpressionsInclude | null
    /**
     * The data needed to create a Impressions.
     */
    data: XOR<ImpressionsCreateInput, ImpressionsUncheckedCreateInput>
  }


  /**
   * Impressions createMany
   */
  export type ImpressionsCreateManyArgs = {
    /**
     * The data used to create many Impressions.
     */
    data: Enumerable<ImpressionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Impressions update
   */
  export type ImpressionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Impressions
     */
    select?: ImpressionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImpressionsInclude | null
    /**
     * The data needed to update a Impressions.
     */
    data: XOR<ImpressionsUpdateInput, ImpressionsUncheckedUpdateInput>
    /**
     * Choose, which Impressions to update.
     */
    where: ImpressionsWhereUniqueInput
  }


  /**
   * Impressions updateMany
   */
  export type ImpressionsUpdateManyArgs = {
    /**
     * The data used to update Impressions.
     */
    data: XOR<ImpressionsUpdateManyMutationInput, ImpressionsUncheckedUpdateManyInput>
    /**
     * Filter which Impressions to update
     */
    where?: ImpressionsWhereInput
  }


  /**
   * Impressions upsert
   */
  export type ImpressionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Impressions
     */
    select?: ImpressionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImpressionsInclude | null
    /**
     * The filter to search for the Impressions to update in case it exists.
     */
    where: ImpressionsWhereUniqueInput
    /**
     * In case the Impressions found by the `where` argument doesn't exist, create a new Impressions with this data.
     */
    create: XOR<ImpressionsCreateInput, ImpressionsUncheckedCreateInput>
    /**
     * In case the Impressions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImpressionsUpdateInput, ImpressionsUncheckedUpdateInput>
  }


  /**
   * Impressions delete
   */
  export type ImpressionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Impressions
     */
    select?: ImpressionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImpressionsInclude | null
    /**
     * Filter which Impressions to delete.
     */
    where: ImpressionsWhereUniqueInput
  }


  /**
   * Impressions deleteMany
   */
  export type ImpressionsDeleteManyArgs = {
    /**
     * Filter which Impressions to delete
     */
    where?: ImpressionsWhereInput
  }


  /**
   * Impressions without action
   */
  export type ImpressionsArgs = {
    /**
     * Select specific fields to fetch from the Impressions
     */
    select?: ImpressionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImpressionsInclude | null
  }



  /**
   * Model WebsiteClicks
   */


  export type AggregateWebsiteClicks = {
    _count: WebsiteClicksCountAggregateOutputType | null
    _avg: WebsiteClicksAvgAggregateOutputType | null
    _sum: WebsiteClicksSumAggregateOutputType | null
    _min: WebsiteClicksMinAggregateOutputType | null
    _max: WebsiteClicksMaxAggregateOutputType | null
  }

  export type WebsiteClicksAvgAggregateOutputType = {
    value: number | null
  }

  export type WebsiteClicksSumAggregateOutputType = {
    value: number | null
  }

  export type WebsiteClicksMinAggregateOutputType = {
    id: string | null
    name: string | null
    value: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type WebsiteClicksMaxAggregateOutputType = {
    id: string | null
    name: string | null
    value: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type WebsiteClicksCountAggregateOutputType = {
    id: number
    name: number
    value: number
    createdAt: number
    userId: number
    _all: number
  }


  export type WebsiteClicksAvgAggregateInputType = {
    value?: true
  }

  export type WebsiteClicksSumAggregateInputType = {
    value?: true
  }

  export type WebsiteClicksMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
    createdAt?: true
    userId?: true
  }

  export type WebsiteClicksMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
    createdAt?: true
    userId?: true
  }

  export type WebsiteClicksCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type WebsiteClicksAggregateArgs = {
    /**
     * Filter which WebsiteClicks to aggregate.
     */
    where?: WebsiteClicksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebsiteClicks to fetch.
     */
    orderBy?: Enumerable<WebsiteClicksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebsiteClicksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebsiteClicks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebsiteClicks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebsiteClicks
    **/
    _count?: true | WebsiteClicksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebsiteClicksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebsiteClicksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebsiteClicksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebsiteClicksMaxAggregateInputType
  }

  export type GetWebsiteClicksAggregateType<T extends WebsiteClicksAggregateArgs> = {
        [P in keyof T & keyof AggregateWebsiteClicks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebsiteClicks[P]>
      : GetScalarType<T[P], AggregateWebsiteClicks[P]>
  }




  export type WebsiteClicksGroupByArgs = {
    where?: WebsiteClicksWhereInput
    orderBy?: Enumerable<WebsiteClicksOrderByWithAggregationInput>
    by: WebsiteClicksScalarFieldEnum[]
    having?: WebsiteClicksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebsiteClicksCountAggregateInputType | true
    _avg?: WebsiteClicksAvgAggregateInputType
    _sum?: WebsiteClicksSumAggregateInputType
    _min?: WebsiteClicksMinAggregateInputType
    _max?: WebsiteClicksMaxAggregateInputType
  }


  export type WebsiteClicksGroupByOutputType = {
    id: string
    name: string | null
    value: number
    createdAt: Date
    userId: string
    _count: WebsiteClicksCountAggregateOutputType | null
    _avg: WebsiteClicksAvgAggregateOutputType | null
    _sum: WebsiteClicksSumAggregateOutputType | null
    _min: WebsiteClicksMinAggregateOutputType | null
    _max: WebsiteClicksMaxAggregateOutputType | null
  }

  type GetWebsiteClicksGroupByPayload<T extends WebsiteClicksGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WebsiteClicksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebsiteClicksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebsiteClicksGroupByOutputType[P]>
            : GetScalarType<T[P], WebsiteClicksGroupByOutputType[P]>
        }
      >
    >


  export type WebsiteClicksSelect = {
    id?: boolean
    name?: boolean
    value?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs
    userId?: boolean
  }


  export type WebsiteClicksInclude = {
    user?: boolean | UserArgs
  }

  export type WebsiteClicksGetPayload<S extends boolean | null | undefined | WebsiteClicksArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WebsiteClicks :
    S extends undefined ? never :
    S extends { include: any } & (WebsiteClicksArgs | WebsiteClicksFindManyArgs)
    ? WebsiteClicks  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WebsiteClicksArgs | WebsiteClicksFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof WebsiteClicks ? WebsiteClicks[P] : never
  } 
      : WebsiteClicks


  type WebsiteClicksCountArgs = 
    Omit<WebsiteClicksFindManyArgs, 'select' | 'include'> & {
      select?: WebsiteClicksCountAggregateInputType | true
    }

  export interface WebsiteClicksDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one WebsiteClicks that matches the filter.
     * @param {WebsiteClicksFindUniqueArgs} args - Arguments to find a WebsiteClicks
     * @example
     * // Get one WebsiteClicks
     * const websiteClicks = await prisma.websiteClicks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WebsiteClicksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WebsiteClicksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WebsiteClicks'> extends True ? Prisma__WebsiteClicksClient<WebsiteClicksGetPayload<T>> : Prisma__WebsiteClicksClient<WebsiteClicksGetPayload<T> | null, null>

    /**
     * Find one WebsiteClicks that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WebsiteClicksFindUniqueOrThrowArgs} args - Arguments to find a WebsiteClicks
     * @example
     * // Get one WebsiteClicks
     * const websiteClicks = await prisma.websiteClicks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WebsiteClicksFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WebsiteClicksFindUniqueOrThrowArgs>
    ): Prisma__WebsiteClicksClient<WebsiteClicksGetPayload<T>>

    /**
     * Find the first WebsiteClicks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteClicksFindFirstArgs} args - Arguments to find a WebsiteClicks
     * @example
     * // Get one WebsiteClicks
     * const websiteClicks = await prisma.websiteClicks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WebsiteClicksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WebsiteClicksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WebsiteClicks'> extends True ? Prisma__WebsiteClicksClient<WebsiteClicksGetPayload<T>> : Prisma__WebsiteClicksClient<WebsiteClicksGetPayload<T> | null, null>

    /**
     * Find the first WebsiteClicks that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteClicksFindFirstOrThrowArgs} args - Arguments to find a WebsiteClicks
     * @example
     * // Get one WebsiteClicks
     * const websiteClicks = await prisma.websiteClicks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WebsiteClicksFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WebsiteClicksFindFirstOrThrowArgs>
    ): Prisma__WebsiteClicksClient<WebsiteClicksGetPayload<T>>

    /**
     * Find zero or more WebsiteClicks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteClicksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebsiteClicks
     * const websiteClicks = await prisma.websiteClicks.findMany()
     * 
     * // Get first 10 WebsiteClicks
     * const websiteClicks = await prisma.websiteClicks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const websiteClicksWithIdOnly = await prisma.websiteClicks.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WebsiteClicksFindManyArgs>(
      args?: SelectSubset<T, WebsiteClicksFindManyArgs>
    ): PrismaPromise<Array<WebsiteClicksGetPayload<T>>>

    /**
     * Create a WebsiteClicks.
     * @param {WebsiteClicksCreateArgs} args - Arguments to create a WebsiteClicks.
     * @example
     * // Create one WebsiteClicks
     * const WebsiteClicks = await prisma.websiteClicks.create({
     *   data: {
     *     // ... data to create a WebsiteClicks
     *   }
     * })
     * 
    **/
    create<T extends WebsiteClicksCreateArgs>(
      args: SelectSubset<T, WebsiteClicksCreateArgs>
    ): Prisma__WebsiteClicksClient<WebsiteClicksGetPayload<T>>

    /**
     * Create many WebsiteClicks.
     *     @param {WebsiteClicksCreateManyArgs} args - Arguments to create many WebsiteClicks.
     *     @example
     *     // Create many WebsiteClicks
     *     const websiteClicks = await prisma.websiteClicks.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WebsiteClicksCreateManyArgs>(
      args?: SelectSubset<T, WebsiteClicksCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a WebsiteClicks.
     * @param {WebsiteClicksDeleteArgs} args - Arguments to delete one WebsiteClicks.
     * @example
     * // Delete one WebsiteClicks
     * const WebsiteClicks = await prisma.websiteClicks.delete({
     *   where: {
     *     // ... filter to delete one WebsiteClicks
     *   }
     * })
     * 
    **/
    delete<T extends WebsiteClicksDeleteArgs>(
      args: SelectSubset<T, WebsiteClicksDeleteArgs>
    ): Prisma__WebsiteClicksClient<WebsiteClicksGetPayload<T>>

    /**
     * Update one WebsiteClicks.
     * @param {WebsiteClicksUpdateArgs} args - Arguments to update one WebsiteClicks.
     * @example
     * // Update one WebsiteClicks
     * const websiteClicks = await prisma.websiteClicks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WebsiteClicksUpdateArgs>(
      args: SelectSubset<T, WebsiteClicksUpdateArgs>
    ): Prisma__WebsiteClicksClient<WebsiteClicksGetPayload<T>>

    /**
     * Delete zero or more WebsiteClicks.
     * @param {WebsiteClicksDeleteManyArgs} args - Arguments to filter WebsiteClicks to delete.
     * @example
     * // Delete a few WebsiteClicks
     * const { count } = await prisma.websiteClicks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WebsiteClicksDeleteManyArgs>(
      args?: SelectSubset<T, WebsiteClicksDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebsiteClicks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteClicksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebsiteClicks
     * const websiteClicks = await prisma.websiteClicks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WebsiteClicksUpdateManyArgs>(
      args: SelectSubset<T, WebsiteClicksUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one WebsiteClicks.
     * @param {WebsiteClicksUpsertArgs} args - Arguments to update or create a WebsiteClicks.
     * @example
     * // Update or create a WebsiteClicks
     * const websiteClicks = await prisma.websiteClicks.upsert({
     *   create: {
     *     // ... data to create a WebsiteClicks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebsiteClicks we want to update
     *   }
     * })
    **/
    upsert<T extends WebsiteClicksUpsertArgs>(
      args: SelectSubset<T, WebsiteClicksUpsertArgs>
    ): Prisma__WebsiteClicksClient<WebsiteClicksGetPayload<T>>

    /**
     * Count the number of WebsiteClicks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteClicksCountArgs} args - Arguments to filter WebsiteClicks to count.
     * @example
     * // Count the number of WebsiteClicks
     * const count = await prisma.websiteClicks.count({
     *   where: {
     *     // ... the filter for the WebsiteClicks we want to count
     *   }
     * })
    **/
    count<T extends WebsiteClicksCountArgs>(
      args?: Subset<T, WebsiteClicksCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebsiteClicksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebsiteClicks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteClicksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebsiteClicksAggregateArgs>(args: Subset<T, WebsiteClicksAggregateArgs>): PrismaPromise<GetWebsiteClicksAggregateType<T>>

    /**
     * Group by WebsiteClicks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteClicksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebsiteClicksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebsiteClicksGroupByArgs['orderBy'] }
        : { orderBy?: WebsiteClicksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebsiteClicksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebsiteClicksGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WebsiteClicks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WebsiteClicksClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WebsiteClicks base type for findUnique actions
   */
  export type WebsiteClicksFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WebsiteClicks
     */
    select?: WebsiteClicksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsiteClicksInclude | null
    /**
     * Filter, which WebsiteClicks to fetch.
     */
    where: WebsiteClicksWhereUniqueInput
  }

  /**
   * WebsiteClicks findUnique
   */
  export interface WebsiteClicksFindUniqueArgs extends WebsiteClicksFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WebsiteClicks findUniqueOrThrow
   */
  export type WebsiteClicksFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WebsiteClicks
     */
    select?: WebsiteClicksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsiteClicksInclude | null
    /**
     * Filter, which WebsiteClicks to fetch.
     */
    where: WebsiteClicksWhereUniqueInput
  }


  /**
   * WebsiteClicks base type for findFirst actions
   */
  export type WebsiteClicksFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WebsiteClicks
     */
    select?: WebsiteClicksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsiteClicksInclude | null
    /**
     * Filter, which WebsiteClicks to fetch.
     */
    where?: WebsiteClicksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebsiteClicks to fetch.
     */
    orderBy?: Enumerable<WebsiteClicksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebsiteClicks.
     */
    cursor?: WebsiteClicksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebsiteClicks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebsiteClicks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebsiteClicks.
     */
    distinct?: Enumerable<WebsiteClicksScalarFieldEnum>
  }

  /**
   * WebsiteClicks findFirst
   */
  export interface WebsiteClicksFindFirstArgs extends WebsiteClicksFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WebsiteClicks findFirstOrThrow
   */
  export type WebsiteClicksFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WebsiteClicks
     */
    select?: WebsiteClicksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsiteClicksInclude | null
    /**
     * Filter, which WebsiteClicks to fetch.
     */
    where?: WebsiteClicksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebsiteClicks to fetch.
     */
    orderBy?: Enumerable<WebsiteClicksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebsiteClicks.
     */
    cursor?: WebsiteClicksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebsiteClicks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebsiteClicks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebsiteClicks.
     */
    distinct?: Enumerable<WebsiteClicksScalarFieldEnum>
  }


  /**
   * WebsiteClicks findMany
   */
  export type WebsiteClicksFindManyArgs = {
    /**
     * Select specific fields to fetch from the WebsiteClicks
     */
    select?: WebsiteClicksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsiteClicksInclude | null
    /**
     * Filter, which WebsiteClicks to fetch.
     */
    where?: WebsiteClicksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebsiteClicks to fetch.
     */
    orderBy?: Enumerable<WebsiteClicksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebsiteClicks.
     */
    cursor?: WebsiteClicksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebsiteClicks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebsiteClicks.
     */
    skip?: number
    distinct?: Enumerable<WebsiteClicksScalarFieldEnum>
  }


  /**
   * WebsiteClicks create
   */
  export type WebsiteClicksCreateArgs = {
    /**
     * Select specific fields to fetch from the WebsiteClicks
     */
    select?: WebsiteClicksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsiteClicksInclude | null
    /**
     * The data needed to create a WebsiteClicks.
     */
    data: XOR<WebsiteClicksCreateInput, WebsiteClicksUncheckedCreateInput>
  }


  /**
   * WebsiteClicks createMany
   */
  export type WebsiteClicksCreateManyArgs = {
    /**
     * The data used to create many WebsiteClicks.
     */
    data: Enumerable<WebsiteClicksCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WebsiteClicks update
   */
  export type WebsiteClicksUpdateArgs = {
    /**
     * Select specific fields to fetch from the WebsiteClicks
     */
    select?: WebsiteClicksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsiteClicksInclude | null
    /**
     * The data needed to update a WebsiteClicks.
     */
    data: XOR<WebsiteClicksUpdateInput, WebsiteClicksUncheckedUpdateInput>
    /**
     * Choose, which WebsiteClicks to update.
     */
    where: WebsiteClicksWhereUniqueInput
  }


  /**
   * WebsiteClicks updateMany
   */
  export type WebsiteClicksUpdateManyArgs = {
    /**
     * The data used to update WebsiteClicks.
     */
    data: XOR<WebsiteClicksUpdateManyMutationInput, WebsiteClicksUncheckedUpdateManyInput>
    /**
     * Filter which WebsiteClicks to update
     */
    where?: WebsiteClicksWhereInput
  }


  /**
   * WebsiteClicks upsert
   */
  export type WebsiteClicksUpsertArgs = {
    /**
     * Select specific fields to fetch from the WebsiteClicks
     */
    select?: WebsiteClicksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsiteClicksInclude | null
    /**
     * The filter to search for the WebsiteClicks to update in case it exists.
     */
    where: WebsiteClicksWhereUniqueInput
    /**
     * In case the WebsiteClicks found by the `where` argument doesn't exist, create a new WebsiteClicks with this data.
     */
    create: XOR<WebsiteClicksCreateInput, WebsiteClicksUncheckedCreateInput>
    /**
     * In case the WebsiteClicks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebsiteClicksUpdateInput, WebsiteClicksUncheckedUpdateInput>
  }


  /**
   * WebsiteClicks delete
   */
  export type WebsiteClicksDeleteArgs = {
    /**
     * Select specific fields to fetch from the WebsiteClicks
     */
    select?: WebsiteClicksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsiteClicksInclude | null
    /**
     * Filter which WebsiteClicks to delete.
     */
    where: WebsiteClicksWhereUniqueInput
  }


  /**
   * WebsiteClicks deleteMany
   */
  export type WebsiteClicksDeleteManyArgs = {
    /**
     * Filter which WebsiteClicks to delete
     */
    where?: WebsiteClicksWhereInput
  }


  /**
   * WebsiteClicks without action
   */
  export type WebsiteClicksArgs = {
    /**
     * Select specific fields to fetch from the WebsiteClicks
     */
    select?: WebsiteClicksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsiteClicksInclude | null
  }



  /**
   * Model Reach
   */


  export type AggregateReach = {
    _count: ReachCountAggregateOutputType | null
    _avg: ReachAvgAggregateOutputType | null
    _sum: ReachSumAggregateOutputType | null
    _min: ReachMinAggregateOutputType | null
    _max: ReachMaxAggregateOutputType | null
  }

  export type ReachAvgAggregateOutputType = {
    value: number | null
  }

  export type ReachSumAggregateOutputType = {
    value: number | null
  }

  export type ReachMinAggregateOutputType = {
    id: string | null
    name: string | null
    value: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type ReachMaxAggregateOutputType = {
    id: string | null
    name: string | null
    value: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type ReachCountAggregateOutputType = {
    id: number
    name: number
    value: number
    createdAt: number
    userId: number
    _all: number
  }


  export type ReachAvgAggregateInputType = {
    value?: true
  }

  export type ReachSumAggregateInputType = {
    value?: true
  }

  export type ReachMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
    createdAt?: true
    userId?: true
  }

  export type ReachMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
    createdAt?: true
    userId?: true
  }

  export type ReachCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type ReachAggregateArgs = {
    /**
     * Filter which Reach to aggregate.
     */
    where?: ReachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reaches to fetch.
     */
    orderBy?: Enumerable<ReachOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reaches
    **/
    _count?: true | ReachCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReachAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReachSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReachMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReachMaxAggregateInputType
  }

  export type GetReachAggregateType<T extends ReachAggregateArgs> = {
        [P in keyof T & keyof AggregateReach]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReach[P]>
      : GetScalarType<T[P], AggregateReach[P]>
  }




  export type ReachGroupByArgs = {
    where?: ReachWhereInput
    orderBy?: Enumerable<ReachOrderByWithAggregationInput>
    by: ReachScalarFieldEnum[]
    having?: ReachScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReachCountAggregateInputType | true
    _avg?: ReachAvgAggregateInputType
    _sum?: ReachSumAggregateInputType
    _min?: ReachMinAggregateInputType
    _max?: ReachMaxAggregateInputType
  }


  export type ReachGroupByOutputType = {
    id: string
    name: string | null
    value: number
    createdAt: Date
    userId: string
    _count: ReachCountAggregateOutputType | null
    _avg: ReachAvgAggregateOutputType | null
    _sum: ReachSumAggregateOutputType | null
    _min: ReachMinAggregateOutputType | null
    _max: ReachMaxAggregateOutputType | null
  }

  type GetReachGroupByPayload<T extends ReachGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReachGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReachGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReachGroupByOutputType[P]>
            : GetScalarType<T[P], ReachGroupByOutputType[P]>
        }
      >
    >


  export type ReachSelect = {
    id?: boolean
    name?: boolean
    value?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs
    userId?: boolean
  }


  export type ReachInclude = {
    user?: boolean | UserArgs
  }

  export type ReachGetPayload<S extends boolean | null | undefined | ReachArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Reach :
    S extends undefined ? never :
    S extends { include: any } & (ReachArgs | ReachFindManyArgs)
    ? Reach  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ReachArgs | ReachFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Reach ? Reach[P] : never
  } 
      : Reach


  type ReachCountArgs = 
    Omit<ReachFindManyArgs, 'select' | 'include'> & {
      select?: ReachCountAggregateInputType | true
    }

  export interface ReachDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Reach that matches the filter.
     * @param {ReachFindUniqueArgs} args - Arguments to find a Reach
     * @example
     * // Get one Reach
     * const reach = await prisma.reach.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReachFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReachFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reach'> extends True ? Prisma__ReachClient<ReachGetPayload<T>> : Prisma__ReachClient<ReachGetPayload<T> | null, null>

    /**
     * Find one Reach that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReachFindUniqueOrThrowArgs} args - Arguments to find a Reach
     * @example
     * // Get one Reach
     * const reach = await prisma.reach.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReachFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReachFindUniqueOrThrowArgs>
    ): Prisma__ReachClient<ReachGetPayload<T>>

    /**
     * Find the first Reach that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReachFindFirstArgs} args - Arguments to find a Reach
     * @example
     * // Get one Reach
     * const reach = await prisma.reach.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReachFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReachFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reach'> extends True ? Prisma__ReachClient<ReachGetPayload<T>> : Prisma__ReachClient<ReachGetPayload<T> | null, null>

    /**
     * Find the first Reach that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReachFindFirstOrThrowArgs} args - Arguments to find a Reach
     * @example
     * // Get one Reach
     * const reach = await prisma.reach.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReachFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReachFindFirstOrThrowArgs>
    ): Prisma__ReachClient<ReachGetPayload<T>>

    /**
     * Find zero or more Reaches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReachFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reaches
     * const reaches = await prisma.reach.findMany()
     * 
     * // Get first 10 Reaches
     * const reaches = await prisma.reach.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reachWithIdOnly = await prisma.reach.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReachFindManyArgs>(
      args?: SelectSubset<T, ReachFindManyArgs>
    ): PrismaPromise<Array<ReachGetPayload<T>>>

    /**
     * Create a Reach.
     * @param {ReachCreateArgs} args - Arguments to create a Reach.
     * @example
     * // Create one Reach
     * const Reach = await prisma.reach.create({
     *   data: {
     *     // ... data to create a Reach
     *   }
     * })
     * 
    **/
    create<T extends ReachCreateArgs>(
      args: SelectSubset<T, ReachCreateArgs>
    ): Prisma__ReachClient<ReachGetPayload<T>>

    /**
     * Create many Reaches.
     *     @param {ReachCreateManyArgs} args - Arguments to create many Reaches.
     *     @example
     *     // Create many Reaches
     *     const reach = await prisma.reach.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReachCreateManyArgs>(
      args?: SelectSubset<T, ReachCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Reach.
     * @param {ReachDeleteArgs} args - Arguments to delete one Reach.
     * @example
     * // Delete one Reach
     * const Reach = await prisma.reach.delete({
     *   where: {
     *     // ... filter to delete one Reach
     *   }
     * })
     * 
    **/
    delete<T extends ReachDeleteArgs>(
      args: SelectSubset<T, ReachDeleteArgs>
    ): Prisma__ReachClient<ReachGetPayload<T>>

    /**
     * Update one Reach.
     * @param {ReachUpdateArgs} args - Arguments to update one Reach.
     * @example
     * // Update one Reach
     * const reach = await prisma.reach.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReachUpdateArgs>(
      args: SelectSubset<T, ReachUpdateArgs>
    ): Prisma__ReachClient<ReachGetPayload<T>>

    /**
     * Delete zero or more Reaches.
     * @param {ReachDeleteManyArgs} args - Arguments to filter Reaches to delete.
     * @example
     * // Delete a few Reaches
     * const { count } = await prisma.reach.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReachDeleteManyArgs>(
      args?: SelectSubset<T, ReachDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReachUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reaches
     * const reach = await prisma.reach.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReachUpdateManyArgs>(
      args: SelectSubset<T, ReachUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reach.
     * @param {ReachUpsertArgs} args - Arguments to update or create a Reach.
     * @example
     * // Update or create a Reach
     * const reach = await prisma.reach.upsert({
     *   create: {
     *     // ... data to create a Reach
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reach we want to update
     *   }
     * })
    **/
    upsert<T extends ReachUpsertArgs>(
      args: SelectSubset<T, ReachUpsertArgs>
    ): Prisma__ReachClient<ReachGetPayload<T>>

    /**
     * Count the number of Reaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReachCountArgs} args - Arguments to filter Reaches to count.
     * @example
     * // Count the number of Reaches
     * const count = await prisma.reach.count({
     *   where: {
     *     // ... the filter for the Reaches we want to count
     *   }
     * })
    **/
    count<T extends ReachCountArgs>(
      args?: Subset<T, ReachCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReachCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reach.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReachAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReachAggregateArgs>(args: Subset<T, ReachAggregateArgs>): PrismaPromise<GetReachAggregateType<T>>

    /**
     * Group by Reach.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReachGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReachGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReachGroupByArgs['orderBy'] }
        : { orderBy?: ReachGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReachGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReachGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Reach.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReachClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Reach base type for findUnique actions
   */
  export type ReachFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Reach
     */
    select?: ReachSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReachInclude | null
    /**
     * Filter, which Reach to fetch.
     */
    where: ReachWhereUniqueInput
  }

  /**
   * Reach findUnique
   */
  export interface ReachFindUniqueArgs extends ReachFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reach findUniqueOrThrow
   */
  export type ReachFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Reach
     */
    select?: ReachSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReachInclude | null
    /**
     * Filter, which Reach to fetch.
     */
    where: ReachWhereUniqueInput
  }


  /**
   * Reach base type for findFirst actions
   */
  export type ReachFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Reach
     */
    select?: ReachSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReachInclude | null
    /**
     * Filter, which Reach to fetch.
     */
    where?: ReachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reaches to fetch.
     */
    orderBy?: Enumerable<ReachOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reaches.
     */
    cursor?: ReachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reaches.
     */
    distinct?: Enumerable<ReachScalarFieldEnum>
  }

  /**
   * Reach findFirst
   */
  export interface ReachFindFirstArgs extends ReachFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reach findFirstOrThrow
   */
  export type ReachFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Reach
     */
    select?: ReachSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReachInclude | null
    /**
     * Filter, which Reach to fetch.
     */
    where?: ReachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reaches to fetch.
     */
    orderBy?: Enumerable<ReachOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reaches.
     */
    cursor?: ReachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reaches.
     */
    distinct?: Enumerable<ReachScalarFieldEnum>
  }


  /**
   * Reach findMany
   */
  export type ReachFindManyArgs = {
    /**
     * Select specific fields to fetch from the Reach
     */
    select?: ReachSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReachInclude | null
    /**
     * Filter, which Reaches to fetch.
     */
    where?: ReachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reaches to fetch.
     */
    orderBy?: Enumerable<ReachOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reaches.
     */
    cursor?: ReachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reaches.
     */
    skip?: number
    distinct?: Enumerable<ReachScalarFieldEnum>
  }


  /**
   * Reach create
   */
  export type ReachCreateArgs = {
    /**
     * Select specific fields to fetch from the Reach
     */
    select?: ReachSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReachInclude | null
    /**
     * The data needed to create a Reach.
     */
    data: XOR<ReachCreateInput, ReachUncheckedCreateInput>
  }


  /**
   * Reach createMany
   */
  export type ReachCreateManyArgs = {
    /**
     * The data used to create many Reaches.
     */
    data: Enumerable<ReachCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Reach update
   */
  export type ReachUpdateArgs = {
    /**
     * Select specific fields to fetch from the Reach
     */
    select?: ReachSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReachInclude | null
    /**
     * The data needed to update a Reach.
     */
    data: XOR<ReachUpdateInput, ReachUncheckedUpdateInput>
    /**
     * Choose, which Reach to update.
     */
    where: ReachWhereUniqueInput
  }


  /**
   * Reach updateMany
   */
  export type ReachUpdateManyArgs = {
    /**
     * The data used to update Reaches.
     */
    data: XOR<ReachUpdateManyMutationInput, ReachUncheckedUpdateManyInput>
    /**
     * Filter which Reaches to update
     */
    where?: ReachWhereInput
  }


  /**
   * Reach upsert
   */
  export type ReachUpsertArgs = {
    /**
     * Select specific fields to fetch from the Reach
     */
    select?: ReachSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReachInclude | null
    /**
     * The filter to search for the Reach to update in case it exists.
     */
    where: ReachWhereUniqueInput
    /**
     * In case the Reach found by the `where` argument doesn't exist, create a new Reach with this data.
     */
    create: XOR<ReachCreateInput, ReachUncheckedCreateInput>
    /**
     * In case the Reach was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReachUpdateInput, ReachUncheckedUpdateInput>
  }


  /**
   * Reach delete
   */
  export type ReachDeleteArgs = {
    /**
     * Select specific fields to fetch from the Reach
     */
    select?: ReachSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReachInclude | null
    /**
     * Filter which Reach to delete.
     */
    where: ReachWhereUniqueInput
  }


  /**
   * Reach deleteMany
   */
  export type ReachDeleteManyArgs = {
    /**
     * Filter which Reaches to delete
     */
    where?: ReachWhereInput
  }


  /**
   * Reach without action
   */
  export type ReachArgs = {
    /**
     * Select specific fields to fetch from the Reach
     */
    select?: ReachSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReachInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const FollowsCountScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type FollowsCountScalarFieldEnum = (typeof FollowsCountScalarFieldEnum)[keyof typeof FollowsCountScalarFieldEnum]


  export const ImpressionsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type ImpressionsScalarFieldEnum = (typeof ImpressionsScalarFieldEnum)[keyof typeof ImpressionsScalarFieldEnum]


  export const ReachScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type ReachScalarFieldEnum = (typeof ReachScalarFieldEnum)[keyof typeof ReachScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    username: 'username',
    user_id: 'user_id',
    followers: 'followers'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WebsiteClicksScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type WebsiteClicksScalarFieldEnum = (typeof WebsiteClicksScalarFieldEnum)[keyof typeof WebsiteClicksScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    username?: StringFilter | string
    user_id?: StringNullableFilter | string | null
    followers?: IntFilter | number
    followsCount?: FollowsCountListRelationFilter
    impressions?: ImpressionsListRelationFilter
    websiteClicks?: WebsiteClicksListRelationFilter
    reach?: ReachListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    user_id?: SortOrder
    followers?: SortOrder
    followsCount?: FollowsCountOrderByRelationAggregateInput
    impressions?: ImpressionsOrderByRelationAggregateInput
    websiteClicks?: WebsiteClicksOrderByRelationAggregateInput
    reach?: ReachOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    user_id?: SortOrder
    followers?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    username?: StringWithAggregatesFilter | string
    user_id?: StringNullableWithAggregatesFilter | string | null
    followers?: IntWithAggregatesFilter | number
  }

  export type FollowsCountWhereInput = {
    AND?: Enumerable<FollowsCountWhereInput>
    OR?: Enumerable<FollowsCountWhereInput>
    NOT?: Enumerable<FollowsCountWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    value?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
  }

  export type FollowsCountOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
  }

  export type FollowsCountWhereUniqueInput = {
    id?: string
  }

  export type FollowsCountOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: FollowsCountCountOrderByAggregateInput
    _avg?: FollowsCountAvgOrderByAggregateInput
    _max?: FollowsCountMaxOrderByAggregateInput
    _min?: FollowsCountMinOrderByAggregateInput
    _sum?: FollowsCountSumOrderByAggregateInput
  }

  export type FollowsCountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FollowsCountScalarWhereWithAggregatesInput>
    OR?: Enumerable<FollowsCountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FollowsCountScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    value?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
  }

  export type ImpressionsWhereInput = {
    AND?: Enumerable<ImpressionsWhereInput>
    OR?: Enumerable<ImpressionsWhereInput>
    NOT?: Enumerable<ImpressionsWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    value?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
  }

  export type ImpressionsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
  }

  export type ImpressionsWhereUniqueInput = {
    id?: string
  }

  export type ImpressionsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: ImpressionsCountOrderByAggregateInput
    _avg?: ImpressionsAvgOrderByAggregateInput
    _max?: ImpressionsMaxOrderByAggregateInput
    _min?: ImpressionsMinOrderByAggregateInput
    _sum?: ImpressionsSumOrderByAggregateInput
  }

  export type ImpressionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ImpressionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ImpressionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ImpressionsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    value?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
  }

  export type WebsiteClicksWhereInput = {
    AND?: Enumerable<WebsiteClicksWhereInput>
    OR?: Enumerable<WebsiteClicksWhereInput>
    NOT?: Enumerable<WebsiteClicksWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    value?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
  }

  export type WebsiteClicksOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
  }

  export type WebsiteClicksWhereUniqueInput = {
    id?: string
  }

  export type WebsiteClicksOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: WebsiteClicksCountOrderByAggregateInput
    _avg?: WebsiteClicksAvgOrderByAggregateInput
    _max?: WebsiteClicksMaxOrderByAggregateInput
    _min?: WebsiteClicksMinOrderByAggregateInput
    _sum?: WebsiteClicksSumOrderByAggregateInput
  }

  export type WebsiteClicksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WebsiteClicksScalarWhereWithAggregatesInput>
    OR?: Enumerable<WebsiteClicksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WebsiteClicksScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    value?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
  }

  export type ReachWhereInput = {
    AND?: Enumerable<ReachWhereInput>
    OR?: Enumerable<ReachWhereInput>
    NOT?: Enumerable<ReachWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    value?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
  }

  export type ReachOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
  }

  export type ReachWhereUniqueInput = {
    id?: string
  }

  export type ReachOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: ReachCountOrderByAggregateInput
    _avg?: ReachAvgOrderByAggregateInput
    _max?: ReachMaxOrderByAggregateInput
    _min?: ReachMinOrderByAggregateInput
    _sum?: ReachSumOrderByAggregateInput
  }

  export type ReachScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReachScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReachScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReachScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    value?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    user_id?: string | null
    followers: number
    followsCount?: FollowsCountCreateNestedManyWithoutUserInput
    impressions?: ImpressionsCreateNestedManyWithoutUserInput
    websiteClicks?: WebsiteClicksCreateNestedManyWithoutUserInput
    reach?: ReachCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    user_id?: string | null
    followers: number
    followsCount?: FollowsCountUncheckedCreateNestedManyWithoutUserInput
    impressions?: ImpressionsUncheckedCreateNestedManyWithoutUserInput
    websiteClicks?: WebsiteClicksUncheckedCreateNestedManyWithoutUserInput
    reach?: ReachUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: IntFieldUpdateOperationsInput | number
    followsCount?: FollowsCountUpdateManyWithoutUserNestedInput
    impressions?: ImpressionsUpdateManyWithoutUserNestedInput
    websiteClicks?: WebsiteClicksUpdateManyWithoutUserNestedInput
    reach?: ReachUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: IntFieldUpdateOperationsInput | number
    followsCount?: FollowsCountUncheckedUpdateManyWithoutUserNestedInput
    impressions?: ImpressionsUncheckedUpdateManyWithoutUserNestedInput
    websiteClicks?: WebsiteClicksUncheckedUpdateManyWithoutUserNestedInput
    reach?: ReachUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    user_id?: string | null
    followers: number
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: IntFieldUpdateOperationsInput | number
  }

  export type FollowsCountCreateInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFollowsCountInput
  }

  export type FollowsCountUncheckedCreateInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
    userId: string
  }

  export type FollowsCountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFollowsCountNestedInput
  }

  export type FollowsCountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowsCountCreateManyInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
    userId: string
  }

  export type FollowsCountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowsCountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ImpressionsCreateInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutImpressionsInput
  }

  export type ImpressionsUncheckedCreateInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
    userId: string
  }

  export type ImpressionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutImpressionsNestedInput
  }

  export type ImpressionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ImpressionsCreateManyInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
    userId: string
  }

  export type ImpressionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImpressionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type WebsiteClicksCreateInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutWebsiteClicksInput
  }

  export type WebsiteClicksUncheckedCreateInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
    userId: string
  }

  export type WebsiteClicksUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWebsiteClicksNestedInput
  }

  export type WebsiteClicksUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type WebsiteClicksCreateManyInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
    userId: string
  }

  export type WebsiteClicksUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebsiteClicksUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ReachCreateInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReachInput
  }

  export type ReachUncheckedCreateInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
    userId: string
  }

  export type ReachUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReachNestedInput
  }

  export type ReachUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ReachCreateManyInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
    userId: string
  }

  export type ReachUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReachUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type FollowsCountListRelationFilter = {
    every?: FollowsCountWhereInput
    some?: FollowsCountWhereInput
    none?: FollowsCountWhereInput
  }

  export type ImpressionsListRelationFilter = {
    every?: ImpressionsWhereInput
    some?: ImpressionsWhereInput
    none?: ImpressionsWhereInput
  }

  export type WebsiteClicksListRelationFilter = {
    every?: WebsiteClicksWhereInput
    some?: WebsiteClicksWhereInput
    none?: WebsiteClicksWhereInput
  }

  export type ReachListRelationFilter = {
    every?: ReachWhereInput
    some?: ReachWhereInput
    none?: ReachWhereInput
  }

  export type FollowsCountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImpressionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WebsiteClicksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReachOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    user_id?: SortOrder
    followers?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    followers?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    user_id?: SortOrder
    followers?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    user_id?: SortOrder
    followers?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    followers?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FollowsCountCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type FollowsCountAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type FollowsCountMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type FollowsCountMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type FollowsCountSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type ImpressionsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type ImpressionsAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type ImpressionsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type ImpressionsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type ImpressionsSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type WebsiteClicksCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type WebsiteClicksAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type WebsiteClicksMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type WebsiteClicksMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type WebsiteClicksSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type ReachCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type ReachAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type ReachMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type ReachMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type ReachSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type FollowsCountCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FollowsCountCreateWithoutUserInput>, Enumerable<FollowsCountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FollowsCountCreateOrConnectWithoutUserInput>
    createMany?: FollowsCountCreateManyUserInputEnvelope
    connect?: Enumerable<FollowsCountWhereUniqueInput>
  }

  export type ImpressionsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ImpressionsCreateWithoutUserInput>, Enumerable<ImpressionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ImpressionsCreateOrConnectWithoutUserInput>
    createMany?: ImpressionsCreateManyUserInputEnvelope
    connect?: Enumerable<ImpressionsWhereUniqueInput>
  }

  export type WebsiteClicksCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WebsiteClicksCreateWithoutUserInput>, Enumerable<WebsiteClicksUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WebsiteClicksCreateOrConnectWithoutUserInput>
    createMany?: WebsiteClicksCreateManyUserInputEnvelope
    connect?: Enumerable<WebsiteClicksWhereUniqueInput>
  }

  export type ReachCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReachCreateWithoutUserInput>, Enumerable<ReachUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReachCreateOrConnectWithoutUserInput>
    createMany?: ReachCreateManyUserInputEnvelope
    connect?: Enumerable<ReachWhereUniqueInput>
  }

  export type FollowsCountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FollowsCountCreateWithoutUserInput>, Enumerable<FollowsCountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FollowsCountCreateOrConnectWithoutUserInput>
    createMany?: FollowsCountCreateManyUserInputEnvelope
    connect?: Enumerable<FollowsCountWhereUniqueInput>
  }

  export type ImpressionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ImpressionsCreateWithoutUserInput>, Enumerable<ImpressionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ImpressionsCreateOrConnectWithoutUserInput>
    createMany?: ImpressionsCreateManyUserInputEnvelope
    connect?: Enumerable<ImpressionsWhereUniqueInput>
  }

  export type WebsiteClicksUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WebsiteClicksCreateWithoutUserInput>, Enumerable<WebsiteClicksUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WebsiteClicksCreateOrConnectWithoutUserInput>
    createMany?: WebsiteClicksCreateManyUserInputEnvelope
    connect?: Enumerable<WebsiteClicksWhereUniqueInput>
  }

  export type ReachUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReachCreateWithoutUserInput>, Enumerable<ReachUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReachCreateOrConnectWithoutUserInput>
    createMany?: ReachCreateManyUserInputEnvelope
    connect?: Enumerable<ReachWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FollowsCountUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FollowsCountCreateWithoutUserInput>, Enumerable<FollowsCountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FollowsCountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FollowsCountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FollowsCountCreateManyUserInputEnvelope
    set?: Enumerable<FollowsCountWhereUniqueInput>
    disconnect?: Enumerable<FollowsCountWhereUniqueInput>
    delete?: Enumerable<FollowsCountWhereUniqueInput>
    connect?: Enumerable<FollowsCountWhereUniqueInput>
    update?: Enumerable<FollowsCountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FollowsCountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FollowsCountScalarWhereInput>
  }

  export type ImpressionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ImpressionsCreateWithoutUserInput>, Enumerable<ImpressionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ImpressionsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ImpressionsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ImpressionsCreateManyUserInputEnvelope
    set?: Enumerable<ImpressionsWhereUniqueInput>
    disconnect?: Enumerable<ImpressionsWhereUniqueInput>
    delete?: Enumerable<ImpressionsWhereUniqueInput>
    connect?: Enumerable<ImpressionsWhereUniqueInput>
    update?: Enumerable<ImpressionsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ImpressionsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ImpressionsScalarWhereInput>
  }

  export type WebsiteClicksUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<WebsiteClicksCreateWithoutUserInput>, Enumerable<WebsiteClicksUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WebsiteClicksCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WebsiteClicksUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WebsiteClicksCreateManyUserInputEnvelope
    set?: Enumerable<WebsiteClicksWhereUniqueInput>
    disconnect?: Enumerable<WebsiteClicksWhereUniqueInput>
    delete?: Enumerable<WebsiteClicksWhereUniqueInput>
    connect?: Enumerable<WebsiteClicksWhereUniqueInput>
    update?: Enumerable<WebsiteClicksUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WebsiteClicksUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WebsiteClicksScalarWhereInput>
  }

  export type ReachUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReachCreateWithoutUserInput>, Enumerable<ReachUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReachCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReachUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReachCreateManyUserInputEnvelope
    set?: Enumerable<ReachWhereUniqueInput>
    disconnect?: Enumerable<ReachWhereUniqueInput>
    delete?: Enumerable<ReachWhereUniqueInput>
    connect?: Enumerable<ReachWhereUniqueInput>
    update?: Enumerable<ReachUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReachUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReachScalarWhereInput>
  }

  export type FollowsCountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FollowsCountCreateWithoutUserInput>, Enumerable<FollowsCountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FollowsCountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FollowsCountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FollowsCountCreateManyUserInputEnvelope
    set?: Enumerable<FollowsCountWhereUniqueInput>
    disconnect?: Enumerable<FollowsCountWhereUniqueInput>
    delete?: Enumerable<FollowsCountWhereUniqueInput>
    connect?: Enumerable<FollowsCountWhereUniqueInput>
    update?: Enumerable<FollowsCountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FollowsCountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FollowsCountScalarWhereInput>
  }

  export type ImpressionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ImpressionsCreateWithoutUserInput>, Enumerable<ImpressionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ImpressionsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ImpressionsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ImpressionsCreateManyUserInputEnvelope
    set?: Enumerable<ImpressionsWhereUniqueInput>
    disconnect?: Enumerable<ImpressionsWhereUniqueInput>
    delete?: Enumerable<ImpressionsWhereUniqueInput>
    connect?: Enumerable<ImpressionsWhereUniqueInput>
    update?: Enumerable<ImpressionsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ImpressionsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ImpressionsScalarWhereInput>
  }

  export type WebsiteClicksUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<WebsiteClicksCreateWithoutUserInput>, Enumerable<WebsiteClicksUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WebsiteClicksCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WebsiteClicksUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WebsiteClicksCreateManyUserInputEnvelope
    set?: Enumerable<WebsiteClicksWhereUniqueInput>
    disconnect?: Enumerable<WebsiteClicksWhereUniqueInput>
    delete?: Enumerable<WebsiteClicksWhereUniqueInput>
    connect?: Enumerable<WebsiteClicksWhereUniqueInput>
    update?: Enumerable<WebsiteClicksUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WebsiteClicksUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WebsiteClicksScalarWhereInput>
  }

  export type ReachUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReachCreateWithoutUserInput>, Enumerable<ReachUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReachCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReachUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReachCreateManyUserInputEnvelope
    set?: Enumerable<ReachWhereUniqueInput>
    disconnect?: Enumerable<ReachWhereUniqueInput>
    delete?: Enumerable<ReachWhereUniqueInput>
    connect?: Enumerable<ReachWhereUniqueInput>
    update?: Enumerable<ReachUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReachUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReachScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutFollowsCountInput = {
    create?: XOR<UserCreateWithoutFollowsCountInput, UserUncheckedCreateWithoutFollowsCountInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowsCountInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFollowsCountNestedInput = {
    create?: XOR<UserCreateWithoutFollowsCountInput, UserUncheckedCreateWithoutFollowsCountInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowsCountInput
    upsert?: UserUpsertWithoutFollowsCountInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFollowsCountInput, UserUncheckedUpdateWithoutFollowsCountInput>
  }

  export type UserCreateNestedOneWithoutImpressionsInput = {
    create?: XOR<UserCreateWithoutImpressionsInput, UserUncheckedCreateWithoutImpressionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutImpressionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutImpressionsNestedInput = {
    create?: XOR<UserCreateWithoutImpressionsInput, UserUncheckedCreateWithoutImpressionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutImpressionsInput
    upsert?: UserUpsertWithoutImpressionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutImpressionsInput, UserUncheckedUpdateWithoutImpressionsInput>
  }

  export type UserCreateNestedOneWithoutWebsiteClicksInput = {
    create?: XOR<UserCreateWithoutWebsiteClicksInput, UserUncheckedCreateWithoutWebsiteClicksInput>
    connectOrCreate?: UserCreateOrConnectWithoutWebsiteClicksInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWebsiteClicksNestedInput = {
    create?: XOR<UserCreateWithoutWebsiteClicksInput, UserUncheckedCreateWithoutWebsiteClicksInput>
    connectOrCreate?: UserCreateOrConnectWithoutWebsiteClicksInput
    upsert?: UserUpsertWithoutWebsiteClicksInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutWebsiteClicksInput, UserUncheckedUpdateWithoutWebsiteClicksInput>
  }

  export type UserCreateNestedOneWithoutReachInput = {
    create?: XOR<UserCreateWithoutReachInput, UserUncheckedCreateWithoutReachInput>
    connectOrCreate?: UserCreateOrConnectWithoutReachInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReachNestedInput = {
    create?: XOR<UserCreateWithoutReachInput, UserUncheckedCreateWithoutReachInput>
    connectOrCreate?: UserCreateOrConnectWithoutReachInput
    upsert?: UserUpsertWithoutReachInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutReachInput, UserUncheckedUpdateWithoutReachInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type FollowsCountCreateWithoutUserInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
  }

  export type FollowsCountUncheckedCreateWithoutUserInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
  }

  export type FollowsCountCreateOrConnectWithoutUserInput = {
    where: FollowsCountWhereUniqueInput
    create: XOR<FollowsCountCreateWithoutUserInput, FollowsCountUncheckedCreateWithoutUserInput>
  }

  export type FollowsCountCreateManyUserInputEnvelope = {
    data: Enumerable<FollowsCountCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ImpressionsCreateWithoutUserInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
  }

  export type ImpressionsUncheckedCreateWithoutUserInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
  }

  export type ImpressionsCreateOrConnectWithoutUserInput = {
    where: ImpressionsWhereUniqueInput
    create: XOR<ImpressionsCreateWithoutUserInput, ImpressionsUncheckedCreateWithoutUserInput>
  }

  export type ImpressionsCreateManyUserInputEnvelope = {
    data: Enumerable<ImpressionsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type WebsiteClicksCreateWithoutUserInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
  }

  export type WebsiteClicksUncheckedCreateWithoutUserInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
  }

  export type WebsiteClicksCreateOrConnectWithoutUserInput = {
    where: WebsiteClicksWhereUniqueInput
    create: XOR<WebsiteClicksCreateWithoutUserInput, WebsiteClicksUncheckedCreateWithoutUserInput>
  }

  export type WebsiteClicksCreateManyUserInputEnvelope = {
    data: Enumerable<WebsiteClicksCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ReachCreateWithoutUserInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
  }

  export type ReachUncheckedCreateWithoutUserInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
  }

  export type ReachCreateOrConnectWithoutUserInput = {
    where: ReachWhereUniqueInput
    create: XOR<ReachCreateWithoutUserInput, ReachUncheckedCreateWithoutUserInput>
  }

  export type ReachCreateManyUserInputEnvelope = {
    data: Enumerable<ReachCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type FollowsCountUpsertWithWhereUniqueWithoutUserInput = {
    where: FollowsCountWhereUniqueInput
    update: XOR<FollowsCountUpdateWithoutUserInput, FollowsCountUncheckedUpdateWithoutUserInput>
    create: XOR<FollowsCountCreateWithoutUserInput, FollowsCountUncheckedCreateWithoutUserInput>
  }

  export type FollowsCountUpdateWithWhereUniqueWithoutUserInput = {
    where: FollowsCountWhereUniqueInput
    data: XOR<FollowsCountUpdateWithoutUserInput, FollowsCountUncheckedUpdateWithoutUserInput>
  }

  export type FollowsCountUpdateManyWithWhereWithoutUserInput = {
    where: FollowsCountScalarWhereInput
    data: XOR<FollowsCountUpdateManyMutationInput, FollowsCountUncheckedUpdateManyWithoutFollowsCountInput>
  }

  export type FollowsCountScalarWhereInput = {
    AND?: Enumerable<FollowsCountScalarWhereInput>
    OR?: Enumerable<FollowsCountScalarWhereInput>
    NOT?: Enumerable<FollowsCountScalarWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    value?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
  }

  export type ImpressionsUpsertWithWhereUniqueWithoutUserInput = {
    where: ImpressionsWhereUniqueInput
    update: XOR<ImpressionsUpdateWithoutUserInput, ImpressionsUncheckedUpdateWithoutUserInput>
    create: XOR<ImpressionsCreateWithoutUserInput, ImpressionsUncheckedCreateWithoutUserInput>
  }

  export type ImpressionsUpdateWithWhereUniqueWithoutUserInput = {
    where: ImpressionsWhereUniqueInput
    data: XOR<ImpressionsUpdateWithoutUserInput, ImpressionsUncheckedUpdateWithoutUserInput>
  }

  export type ImpressionsUpdateManyWithWhereWithoutUserInput = {
    where: ImpressionsScalarWhereInput
    data: XOR<ImpressionsUpdateManyMutationInput, ImpressionsUncheckedUpdateManyWithoutImpressionsInput>
  }

  export type ImpressionsScalarWhereInput = {
    AND?: Enumerable<ImpressionsScalarWhereInput>
    OR?: Enumerable<ImpressionsScalarWhereInput>
    NOT?: Enumerable<ImpressionsScalarWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    value?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
  }

  export type WebsiteClicksUpsertWithWhereUniqueWithoutUserInput = {
    where: WebsiteClicksWhereUniqueInput
    update: XOR<WebsiteClicksUpdateWithoutUserInput, WebsiteClicksUncheckedUpdateWithoutUserInput>
    create: XOR<WebsiteClicksCreateWithoutUserInput, WebsiteClicksUncheckedCreateWithoutUserInput>
  }

  export type WebsiteClicksUpdateWithWhereUniqueWithoutUserInput = {
    where: WebsiteClicksWhereUniqueInput
    data: XOR<WebsiteClicksUpdateWithoutUserInput, WebsiteClicksUncheckedUpdateWithoutUserInput>
  }

  export type WebsiteClicksUpdateManyWithWhereWithoutUserInput = {
    where: WebsiteClicksScalarWhereInput
    data: XOR<WebsiteClicksUpdateManyMutationInput, WebsiteClicksUncheckedUpdateManyWithoutWebsiteClicksInput>
  }

  export type WebsiteClicksScalarWhereInput = {
    AND?: Enumerable<WebsiteClicksScalarWhereInput>
    OR?: Enumerable<WebsiteClicksScalarWhereInput>
    NOT?: Enumerable<WebsiteClicksScalarWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    value?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
  }

  export type ReachUpsertWithWhereUniqueWithoutUserInput = {
    where: ReachWhereUniqueInput
    update: XOR<ReachUpdateWithoutUserInput, ReachUncheckedUpdateWithoutUserInput>
    create: XOR<ReachCreateWithoutUserInput, ReachUncheckedCreateWithoutUserInput>
  }

  export type ReachUpdateWithWhereUniqueWithoutUserInput = {
    where: ReachWhereUniqueInput
    data: XOR<ReachUpdateWithoutUserInput, ReachUncheckedUpdateWithoutUserInput>
  }

  export type ReachUpdateManyWithWhereWithoutUserInput = {
    where: ReachScalarWhereInput
    data: XOR<ReachUpdateManyMutationInput, ReachUncheckedUpdateManyWithoutReachInput>
  }

  export type ReachScalarWhereInput = {
    AND?: Enumerable<ReachScalarWhereInput>
    OR?: Enumerable<ReachScalarWhereInput>
    NOT?: Enumerable<ReachScalarWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    value?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
  }

  export type UserCreateWithoutFollowsCountInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    user_id?: string | null
    followers: number
    impressions?: ImpressionsCreateNestedManyWithoutUserInput
    websiteClicks?: WebsiteClicksCreateNestedManyWithoutUserInput
    reach?: ReachCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowsCountInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    user_id?: string | null
    followers: number
    impressions?: ImpressionsUncheckedCreateNestedManyWithoutUserInput
    websiteClicks?: WebsiteClicksUncheckedCreateNestedManyWithoutUserInput
    reach?: ReachUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowsCountInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowsCountInput, UserUncheckedCreateWithoutFollowsCountInput>
  }

  export type UserUpsertWithoutFollowsCountInput = {
    update: XOR<UserUpdateWithoutFollowsCountInput, UserUncheckedUpdateWithoutFollowsCountInput>
    create: XOR<UserCreateWithoutFollowsCountInput, UserUncheckedCreateWithoutFollowsCountInput>
  }

  export type UserUpdateWithoutFollowsCountInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: IntFieldUpdateOperationsInput | number
    impressions?: ImpressionsUpdateManyWithoutUserNestedInput
    websiteClicks?: WebsiteClicksUpdateManyWithoutUserNestedInput
    reach?: ReachUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowsCountInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: IntFieldUpdateOperationsInput | number
    impressions?: ImpressionsUncheckedUpdateManyWithoutUserNestedInput
    websiteClicks?: WebsiteClicksUncheckedUpdateManyWithoutUserNestedInput
    reach?: ReachUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutImpressionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    user_id?: string | null
    followers: number
    followsCount?: FollowsCountCreateNestedManyWithoutUserInput
    websiteClicks?: WebsiteClicksCreateNestedManyWithoutUserInput
    reach?: ReachCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutImpressionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    user_id?: string | null
    followers: number
    followsCount?: FollowsCountUncheckedCreateNestedManyWithoutUserInput
    websiteClicks?: WebsiteClicksUncheckedCreateNestedManyWithoutUserInput
    reach?: ReachUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutImpressionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutImpressionsInput, UserUncheckedCreateWithoutImpressionsInput>
  }

  export type UserUpsertWithoutImpressionsInput = {
    update: XOR<UserUpdateWithoutImpressionsInput, UserUncheckedUpdateWithoutImpressionsInput>
    create: XOR<UserCreateWithoutImpressionsInput, UserUncheckedCreateWithoutImpressionsInput>
  }

  export type UserUpdateWithoutImpressionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: IntFieldUpdateOperationsInput | number
    followsCount?: FollowsCountUpdateManyWithoutUserNestedInput
    websiteClicks?: WebsiteClicksUpdateManyWithoutUserNestedInput
    reach?: ReachUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutImpressionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: IntFieldUpdateOperationsInput | number
    followsCount?: FollowsCountUncheckedUpdateManyWithoutUserNestedInput
    websiteClicks?: WebsiteClicksUncheckedUpdateManyWithoutUserNestedInput
    reach?: ReachUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutWebsiteClicksInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    user_id?: string | null
    followers: number
    followsCount?: FollowsCountCreateNestedManyWithoutUserInput
    impressions?: ImpressionsCreateNestedManyWithoutUserInput
    reach?: ReachCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWebsiteClicksInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    user_id?: string | null
    followers: number
    followsCount?: FollowsCountUncheckedCreateNestedManyWithoutUserInput
    impressions?: ImpressionsUncheckedCreateNestedManyWithoutUserInput
    reach?: ReachUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWebsiteClicksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWebsiteClicksInput, UserUncheckedCreateWithoutWebsiteClicksInput>
  }

  export type UserUpsertWithoutWebsiteClicksInput = {
    update: XOR<UserUpdateWithoutWebsiteClicksInput, UserUncheckedUpdateWithoutWebsiteClicksInput>
    create: XOR<UserCreateWithoutWebsiteClicksInput, UserUncheckedCreateWithoutWebsiteClicksInput>
  }

  export type UserUpdateWithoutWebsiteClicksInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: IntFieldUpdateOperationsInput | number
    followsCount?: FollowsCountUpdateManyWithoutUserNestedInput
    impressions?: ImpressionsUpdateManyWithoutUserNestedInput
    reach?: ReachUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWebsiteClicksInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: IntFieldUpdateOperationsInput | number
    followsCount?: FollowsCountUncheckedUpdateManyWithoutUserNestedInput
    impressions?: ImpressionsUncheckedUpdateManyWithoutUserNestedInput
    reach?: ReachUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutReachInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    user_id?: string | null
    followers: number
    followsCount?: FollowsCountCreateNestedManyWithoutUserInput
    impressions?: ImpressionsCreateNestedManyWithoutUserInput
    websiteClicks?: WebsiteClicksCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReachInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    user_id?: string | null
    followers: number
    followsCount?: FollowsCountUncheckedCreateNestedManyWithoutUserInput
    impressions?: ImpressionsUncheckedCreateNestedManyWithoutUserInput
    websiteClicks?: WebsiteClicksUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReachInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReachInput, UserUncheckedCreateWithoutReachInput>
  }

  export type UserUpsertWithoutReachInput = {
    update: XOR<UserUpdateWithoutReachInput, UserUncheckedUpdateWithoutReachInput>
    create: XOR<UserCreateWithoutReachInput, UserUncheckedCreateWithoutReachInput>
  }

  export type UserUpdateWithoutReachInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: IntFieldUpdateOperationsInput | number
    followsCount?: FollowsCountUpdateManyWithoutUserNestedInput
    impressions?: ImpressionsUpdateManyWithoutUserNestedInput
    websiteClicks?: WebsiteClicksUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReachInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: IntFieldUpdateOperationsInput | number
    followsCount?: FollowsCountUncheckedUpdateManyWithoutUserNestedInput
    impressions?: ImpressionsUncheckedUpdateManyWithoutUserNestedInput
    websiteClicks?: WebsiteClicksUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FollowsCountCreateManyUserInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
  }

  export type ImpressionsCreateManyUserInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
  }

  export type WebsiteClicksCreateManyUserInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
  }

  export type ReachCreateManyUserInput = {
    id?: string
    name?: string | null
    value: number
    createdAt?: Date | string
  }

  export type FollowsCountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowsCountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowsCountUncheckedUpdateManyWithoutFollowsCountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImpressionsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImpressionsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImpressionsUncheckedUpdateManyWithoutImpressionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebsiteClicksUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebsiteClicksUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebsiteClicksUncheckedUpdateManyWithoutWebsiteClicksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReachUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReachUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReachUncheckedUpdateManyWithoutReachInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}